// HW5IntListOps.java
// CS 201 HW 5 Problem 1
// 
// $ Gabrielle Beaulieu 

public class HW5IntListOps extends IntListOps {

	
    public static boolean isSorted(IntList L) 
    //recursively checks if IntList L is sorted
    {	
    	if (length(L) < 2) { //base case
    		return true;
    	} else if (head(L) <= (head(tail(L)))){ //recursive case
    		return isSorted(tail(L)); 
    	} else {
    		return false;
    	}
    }

    
    public static IntList remove(int i, IntList L) 
    //recursively removes all occurrences of int i from IntList L
    {
    	if (isEmpty(L)){
    		return empty();
    	} else if (head(L) != i) {
    		return prepend((head(L)), remove(i, tail(L)));
    	} else {
    		return remove(i, tail(L));
    	}
    }

    
    public static IntList removeDuplicates(IntList L) 
    //recursively removes duplicates of an IntList L
    {
    	if (isEmpty(L)){
    		return empty();
    	} else if (contains(head(L), tail(L))) {
    		return removeDuplicates(tail(L));
    	} else {
    		return prepend(head(L), removeDuplicates(tail(L)));
    	}
    }
    	
    
    public static Boolean contains(int i, IntList L) 
    //recursively determines whether int i is an elt in IntList L
    {
    	if (isEmpty(L)){
    		return false;
    	} else if (head(L) == i) {
    		return true;
    	} else {	
    		return contains(i, tail(L));	
    	}
    }

}

